{"paragraphs":[{"text":"%md \n\n### Logistic Regression Classification in Scala using Spark ML \n\n*Hadi*","user":"anonymous","dateUpdated":"2018-01-06T09:15:48-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Logistic Regression Classification in Scala using Spark ML</h3>\n<p><em>Hadi</em></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514249242138_-243337427","id":"20171225-164722_1822736710","dateCreated":"2017-12-25T16:47:22-0800","dateStarted":"2018-01-06T09:15:48-0800","dateFinished":"2018-01-06T09:15:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:44476"},{"text":"%md\n\n#### Spark ML: \nworks with DataFrames (vs. Spark Mllib works with RDDs)","user":"anonymous","dateUpdated":"2018-01-05T12:02:33-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Spark ML:</h4>\n<p>works with DataFrames (vs. Spark Mllib works with RDDs)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514770228390_-1096842883","id":"20171231-173028_1024443740","dateCreated":"2017-12-31T17:30:28-0800","dateStarted":"2018-01-05T12:02:33-0800","dateFinished":"2018-01-05T12:02:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44477"},{"text":"%md\n\n### Concepts\n\n<b>DataFrame</b>: This ML API uses DataFrame from Spark SQL as an ML dataset, which can hold a variety of data types. E.g., a DataFrame could have different columns storing text, feature vectors, true labels, and predictions.\n\n<b>Transformer</b>: A Transformer is an algorithm which can transform one DataFrame into another DataFrame. E.g., an ML model is a Transformer which transforms a DataFrame with features into a DataFrame with predictions.\n\n<b>Estimator</b>: An Estimator is an algorithm which can be fit on a DataFrame to produce a Transformer. E.g., a learning algorithm is an Estimator which trains on a DataFrame and produces a model.\n\n<b>Pipeline</b>: A Pipeline chains multiple Transformers and Estimators together to specify an ML workflow.\n\n(from spark.apache.org)","user":"anonymous","dateUpdated":"2018-01-05T10:06:00-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Concepts</h3>\n<p><b>DataFrame</b>: This ML API uses DataFrame from Spark SQL as an ML dataset, which can hold a variety of data types. E.g., a DataFrame could have different columns storing text, feature vectors, true labels, and predictions.</p>\n<p><b>Transformer</b>: A Transformer is an algorithm which can transform one DataFrame into another DataFrame. E.g., an ML model is a Transformer which transforms a DataFrame with features into a DataFrame with predictions.</p>\n<p><b>Estimator</b>: An Estimator is an algorithm which can be fit on a DataFrame to produce a Transformer. E.g., a learning algorithm is an Estimator which trains on a DataFrame and produces a model.</p>\n<p><b>Pipeline</b>: A Pipeline chains multiple Transformers and Estimators together to specify an ML workflow.</p>\n<p>(from spark.apache.org)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514685118991_406721799","id":"20171230-175158_940542014","dateCreated":"2017-12-30T17:51:58-0800","dateStarted":"2018-01-05T10:06:00-0800","dateFinished":"2018-01-05T10:06:00-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44478"},{"text":"%md\n","user":"anonymous","dateUpdated":"2018-01-06T09:35:07-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1515260063233_-1697103936","id":"20180106-093423_1096099615","dateCreated":"2018-01-06T09:34:23-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44479"},{"text":"import org.apache.spark.sql.DataFrame\n\nval data = spark.read.option(\"header\", \"true\").csv(\"/Users/hadi.minooei/Documents/DSbyHadi/car_ownership.csv\")","user":"anonymous","dateUpdated":"2018-01-06T09:36:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\ndata: org.apache.spark.sql.DataFrame = [id: string, income: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514247967092_-1931440980","id":"20171225-162607_709880967","dateCreated":"2017-12-25T16:26:07-0800","dateStarted":"2018-01-06T09:36:40-0800","dateFinished":"2018-01-06T09:37:01-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44480"},{"text":"data.count\ndata.columns","user":"anonymous","dateUpdated":"2018-01-06T09:37:13-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: Long = 13\nres2: Array[String] = Array(id, income, state, gender, owns_car)\n"}]},"apps":[],"jobName":"paragraph_1514661614308_-1374005327","id":"20171230-112014_1719391521","dateCreated":"2017-12-30T11:20:14-0800","dateStarted":"2018-01-06T09:37:13-0800","dateFinished":"2018-01-06T09:37:15-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44481"},{"text":"data.printSchema","user":"anonymous","dateUpdated":"2018-01-06T09:37:24-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- income: string (nullable = true)\n |-- state: string (nullable = true)\n |-- gender: string (nullable = true)\n |-- owns_car: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1514689034002_277438470","id":"20171230-185714_875347297","dateCreated":"2017-12-30T18:57:14-0800","dateStarted":"2018-01-06T09:37:24-0800","dateFinished":"2018-01-06T09:37:25-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44482"},{"text":"// Change income type from String to Double","user":"anonymous","dateUpdated":"2018-01-05T10:05:39-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514688773911_-1733045268","id":"20171230-185253_59720157","dateCreated":"2017-12-30T18:52:53-0800","dateStarted":"2018-01-05T10:05:40-0800","dateFinished":"2018-01-05T10:05:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44483"},{"text":"import org.apache.spark.sql.types.DoubleType\n\nval dataDF = data\n                .withColumn(\"income_double\", data(\"income\").cast(DoubleType))\n                .drop(\"income\")\n                .withColumnRenamed(\"income_double\", \"income\")","user":"anonymous","dateUpdated":"2018-01-06T09:38:16-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types.DoubleType\ndataDF: org.apache.spark.sql.DataFrame = [id: string, state: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514248902546_1827474743","id":"20171225-164142_866017758","dateCreated":"2017-12-25T16:41:42-0800","dateStarted":"2018-01-06T09:38:16-0800","dateFinished":"2018-01-06T09:38:17-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44484"},{"text":"dataDF.printSchema","user":"anonymous","dateUpdated":"2018-01-06T09:38:26-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- state: string (nullable = true)\n |-- gender: string (nullable = true)\n |-- owns_car: string (nullable = true)\n |-- income: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1514249026366_690342529","id":"20171225-164346_1413834120","dateCreated":"2017-12-25T16:43:46-0800","dateStarted":"2018-01-06T09:38:26-0800","dateFinished":"2018-01-06T09:38:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44485"},{"text":"dataDF.take(3)","user":"anonymous","dateUpdated":"2018-01-06T09:38:33-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res6: Array[org.apache.spark.sql.Row] = Array([1,CA,male,false,40000.0], [2,CA,female,false,50000.0], [3,UT,female,true,35000.0])\n"}]},"apps":[],"jobName":"paragraph_1514249034925_1579897310","id":"20171225-164354_2011064702","dateCreated":"2017-12-25T16:43:54-0800","dateStarted":"2018-01-06T09:38:33-0800","dateFinished":"2018-01-06T09:38:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44486"},{"text":"// We need to predict owns_car --> response, outcome or dependent variable\n// Three features to be used: state, gender and income\n// 'income' is a continuous feature \n// 'state' and 'gender' are categorical features","user":"anonymous","dateUpdated":"2018-01-05T10:05:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514249045301_1560690514","id":"20171225-164405_808048175","dateCreated":"2017-12-25T16:44:05-0800","dateStarted":"2018-01-05T10:05:41-0800","dateFinished":"2018-01-05T10:05:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44487"},{"text":"// We need to index the owns_car i.e. true -> 0.0 and false -> 1.0 or vice versa.\n// For this we use StringIndexer.","user":"anonymous","dateUpdated":"2018-01-05T10:05:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514249390285_1362218089","id":"20171225-164950_1144267600","dateCreated":"2017-12-25T16:49:50-0800","dateStarted":"2018-01-05T10:05:42-0800","dateFinished":"2018-01-05T10:05:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44488"},{"text":"import org.apache.spark.ml.feature.{StringIndexer}\n\nval labelIndexer = new StringIndexer()\n        .setInputCol(\"owns_car\")\n        .setOutputCol(\"owns_car_index\")\n        .fit(dataDF)","user":"anonymous","dateUpdated":"2018-01-06T09:40:14-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.StringIndexer\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_240671ee4e49\n"}]},"apps":[],"jobName":"paragraph_1514661405896_-1648991877","id":"20171230-111645_1636461841","dateCreated":"2017-12-30T11:16:45-0800","dateStarted":"2018-01-06T09:40:14-0800","dateFinished":"2018-01-06T09:40:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44489"},{"text":"labelIndexer.transform(dataDF).columns\nlabelIndexer.transform(dataDF).take(4)","user":"anonymous","dateUpdated":"2018-01-06T09:40:32-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res8: Array[String] = Array(id, state, gender, owns_car, income, owns_car_index)\nres9: Array[org.apache.spark.sql.Row] = Array([1,CA,male,false,40000.0,1.0], [2,CA,female,false,50000.0,1.0], [3,UT,female,true,35000.0,0.0], [4,UT,female,false,20000.0,1.0])\n"}]},"apps":[],"jobName":"paragraph_1514687225533_1775091915","id":"20171230-182705_1615244198","dateCreated":"2017-12-30T18:27:05-0800","dateStarted":"2018-01-06T09:40:32-0800","dateFinished":"2018-01-06T09:40:33-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44490"},{"text":"// Three features to be used: state, gender and income\n// 'income' is a continuous feature \n// 'state' and 'gender' are categorical features","user":"anonymous","dateUpdated":"2018-01-05T10:05:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514774662769_-629060506","id":"20171231-184422_1966221586","dateCreated":"2017-12-31T18:44:22-0800","dateStarted":"2018-01-05T10:05:43-0800","dateFinished":"2018-01-05T10:05:43-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44491"},{"text":"%md\n\n<b>One-hot encoding</b> maps a column of label indices to a column of binary vectors, with at most a single one-value. \nThis encoding allows algorithms which expect continuous features, such as Logistic Regression, to use categorical features.","user":"anonymous","dateUpdated":"2018-01-05T10:05:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><b>One-hot encoding</b> maps a column of label indices to a column of binary vectors, with at most a single one-value.<br/>This encoding allows algorithms which expect continuous features, such as Logistic Regression, to use categorical features.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514686213953_-320077620","id":"20171230-181013_886887095","dateCreated":"2017-12-30T18:10:13-0800","dateStarted":"2018-01-05T10:05:41-0800","dateFinished":"2018-01-05T10:05:41-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44492"},{"text":"// Illustration\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\n\nval df = spark.createDataFrame(Seq(\n  (0, \"a\"),\n  (1, \"b\"),\n  (2, \"c\"),\n  (3, \"a\"),\n  (4, \"a\"),\n  (5, \"c\")\n)).toDF(\"id\", \"category\")\n\nval indexer = new StringIndexer()\n  .setInputCol(\"category\")\n  .setOutputCol(\"categoryIndex\")\n  .fit(df)\nval indexed = indexer.transform(df)\n\nval encoder = new OneHotEncoder()\n  .setInputCol(\"categoryIndex\")\n  .setOutputCol(\"categoryVec\")\n\nval encoded = encoder.transform(indexed)\nencoded.show()\n","user":"anonymous","dateUpdated":"2018-01-06T09:42:49-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\ndf: org.apache.spark.sql.DataFrame = [id: int, category: string]\nindexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_3ab1615c1040\nindexed: org.apache.spark.sql.DataFrame = [id: int, category: string ... 1 more field]\nencoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_37cf364ddfff\nencoded: org.apache.spark.sql.DataFrame = [id: int, category: string ... 2 more fields]\n+---+--------+-------------+-------------+\n| id|category|categoryIndex|  categoryVec|\n+---+--------+-------------+-------------+\n|  0|       a|          0.0|(2,[0],[1.0])|\n|  1|       b|          2.0|    (2,[],[])|\n|  2|       c|          1.0|(2,[1],[1.0])|\n|  3|       a|          0.0|(2,[0],[1.0])|\n|  4|       a|          0.0|(2,[0],[1.0])|\n|  5|       c|          1.0|(2,[1],[1.0])|\n+---+--------+-------------+-------------+\n\n"}]},"apps":[],"jobName":"paragraph_1514766323865_1088938641","id":"20171231-162523_1451385280","dateCreated":"2017-12-31T16:25:23-0800","dateStarted":"2018-01-06T09:42:49-0800","dateFinished":"2018-01-06T09:42:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44493"},{"text":"// Two dummy binary variables generated: (categoryA, categoryC)\n// This is like defining two binary variables categoryA, categoryC but in the short vector format (it's a\n// dense vector)\n// a: (2,[0],[1.0]) -> vector of len 2, with value at entry 0 equals 1.0 i.e. (1.0, 0.0)\n// c: (2,[1],[1.0]) -> vector of len 2, with value at entry 1 equals 1.0 i.e. (0.0, 1.0)\n// b: (2,[],[]) -> vector of len 2, with all etries 0.0 i.e. (0.0, 0.0)\n","user":"anonymous","dateUpdated":"2018-01-05T14:35:20-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514686548235_-1193951285","id":"20171230-181548_757056193","dateCreated":"2017-12-30T18:15:48-0800","dateStarted":"2018-01-05T14:35:20-0800","dateFinished":"2018-01-05T14:35:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44494"},{"text":"import org.apache.spark.ml.feature.OneHotEncoder;\n\nval genderIndexer = new StringIndexer()\n        .setInputCol(\"gender\")\n        .setOutputCol(\"gender\" + \"_index\")\n        .setHandleInvalid(\"skip\")\n        .fit(dataDF)\n\nval genderOneHotEncoder = new OneHotEncoder()\n            .setInputCol(\"gender\" + \"_index\")\n            .setOutputCol(\"gender\" + \"_vec\")","user":"anonymous","dateUpdated":"2018-01-06T09:45:33-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.OneHotEncoder\ngenderIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_cf80317450aa\ngenderOneHotEncoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_c7a65567c640\n"}]},"apps":[],"jobName":"paragraph_1514661447550_-1492906417","id":"20171230-111727_1248125003","dateCreated":"2017-12-30T11:17:27-0800","dateStarted":"2018-01-06T09:45:33-0800","dateFinished":"2018-01-06T09:45:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44495"},{"text":"val stateIndexer = new StringIndexer()\n        .setInputCol(\"state\")\n        .setOutputCol(\"state\" + \"_index\")\n        .setHandleInvalid(\"skip\")\n        .fit(dataDF)\n\nval stateOneHotEncoder = new OneHotEncoder()\n            .setInputCol(\"state\" + \"_index\")\n            .setOutputCol(\"state\" + \"_vec\")","user":"anonymous","dateUpdated":"2018-01-06T09:46:06-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"stateIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_8e9d6ec3d0c8\nstateOneHotEncoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_c29def7f74c1\n"}]},"apps":[],"jobName":"paragraph_1514661447174_-1557544232","id":"20171230-111727_1105500600","dateCreated":"2017-12-30T11:17:27-0800","dateStarted":"2018-01-06T09:46:07-0800","dateFinished":"2018-01-06T09:46:07-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44496"},{"text":"val test1 = stateIndexer.transform(dataDF)\nval test2 = stateOneHotEncoder.transform(test1)","user":"anonymous","dateUpdated":"2018-01-06T09:46:36-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"test1: org.apache.spark.sql.DataFrame = [id: string, state: string ... 4 more fields]\ntest2: org.apache.spark.sql.DataFrame = [id: string, state: string ... 5 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514661446824_-1325925394","id":"20171230-111726_1473112042","dateCreated":"2017-12-30T11:17:26-0800","dateStarted":"2018-01-06T09:46:36-0800","dateFinished":"2018-01-06T09:46:37-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44497"},{"text":"test1.columns\ntest1.take(6)","user":"anonymous","dateUpdated":"2018-01-06T09:46:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res19: Array[String] = Array(id, state, gender, owns_car, income, state_index)\nres20: Array[org.apache.spark.sql.Row] = Array([1,CA,male,false,40000.0,0.0], [2,CA,female,false,50000.0,0.0], [3,UT,female,true,35000.0,2.0], [4,UT,female,false,20000.0,2.0], [5,CA,male,true,120000.0,0.0], [6,TX,male,true,40000.0,1.0])\n"}]},"apps":[],"jobName":"paragraph_1514661446371_-1150095147","id":"20171230-111726_828439194","dateCreated":"2017-12-30T11:17:26-0800","dateStarted":"2018-01-06T09:46:40-0800","dateFinished":"2018-01-06T09:46:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44498"},{"text":"test2.columns\ntest2.take(6)","user":"anonymous","dateUpdated":"2018-01-06T09:47:10-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res21: Array[String] = Array(id, state, gender, owns_car, income, state_index, state_vec)\nres22: Array[org.apache.spark.sql.Row] = Array([1,CA,male,false,40000.0,0.0,(2,[0],[1.0])], [2,CA,female,false,50000.0,0.0,(2,[0],[1.0])], [3,UT,female,true,35000.0,2.0,(2,[],[])], [4,UT,female,false,20000.0,2.0,(2,[],[])], [5,CA,male,true,120000.0,0.0,(2,[0],[1.0])], [6,TX,male,true,40000.0,1.0,(2,[1],[1.0])])\n"}]},"apps":[],"jobName":"paragraph_1514685485982_1748494455","id":"20171230-175805_1315253809","dateCreated":"2017-12-30T17:58:05-0800","dateStarted":"2018-01-06T09:47:10-0800","dateFinished":"2018-01-06T09:47:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44499"},{"text":"val test3 = genderIndexer.transform(test2)\nval test4 = genderOneHotEncoder.transform(test3)","user":"anonymous","dateUpdated":"2018-01-06T09:47:38-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"test3: org.apache.spark.sql.DataFrame = [id: string, state: string ... 6 more fields]\ntest4: org.apache.spark.sql.DataFrame = [id: string, state: string ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514688342056_1036395929","id":"20171230-184542_1863670013","dateCreated":"2017-12-30T18:45:42-0800","dateStarted":"2018-01-06T09:47:38-0800","dateFinished":"2018-01-06T09:47:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44500"},{"text":"test4.columns\ntest4.head","user":"anonymous","dateUpdated":"2018-01-06T09:47:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res23: Array[String] = Array(id, state, gender, owns_car, income, state_index, state_vec, gender_index, gender_vec)\nres24: org.apache.spark.sql.Row = [1,CA,male,false,40000.0,0.0,(2,[0],[1.0]),0.0,(1,[0],[1.0])]\n"}]},"apps":[],"jobName":"paragraph_1514775161413_-1828815966","id":"20171231-185241_1219146455","dateCreated":"2017-12-31T18:52:41-0800","dateStarted":"2018-01-06T09:47:41-0800","dateFinished":"2018-01-06T09:47:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44501"},{"text":"// Putting all featurs together in a vector\n\n// features: stateCA, stateTX, genderMale, income","user":"anonymous","dateUpdated":"2018-01-05T10:05:42-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514687718266_842380671","id":"20171230-183518_1054552292","dateCreated":"2017-12-30T18:35:18-0800","dateStarted":"2018-01-05T10:05:49-0800","dateFinished":"2018-01-05T10:05:49-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44502"},{"text":"%md \n<b>VectorAssembler</b> is a transformer that combines a given list of columns into a single vector column. It is useful for combining raw features and features generated by different feature transformers into a single feature vector","user":"anonymous","dateUpdated":"2018-01-05T10:05:43-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><b>VectorAssembler</b> is a transformer that combines a given list of columns into a single vector column. It is useful for combining raw features and features generated by different feature transformers into a single feature vector</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514775392008_-158683932","id":"20171231-185632_839988333","dateCreated":"2017-12-31T18:56:32-0800","dateStarted":"2018-01-05T10:05:43-0800","dateFinished":"2018-01-05T10:05:43-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44503"},{"text":"import org.apache.spark.ml.feature.VectorAssembler\n\nval featuresAssembler = new VectorAssembler()\n                            .setInputCols(Array(\"income\", \"state_vec\", \"gender_vec\"))\n                            .setOutputCol(\"features\")","user":"anonymous","dateUpdated":"2018-01-06T09:49:34-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.VectorAssembler\nfeaturesAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_1e8ef0fb6f19\n"}]},"apps":[],"jobName":"paragraph_1514687709908_-336890032","id":"20171230-183509_51608077","dateCreated":"2017-12-30T18:35:09-0800","dateStarted":"2018-01-06T09:49:34-0800","dateFinished":"2018-01-06T09:49:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44504"},{"text":"val assembled = featuresAssembler.transform(test4)\nassembled.columns\nassembled.head","user":"anonymous","dateUpdated":"2018-01-06T09:49:48-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"assembled: org.apache.spark.sql.DataFrame = [id: string, state: string ... 8 more fields]\nres26: Array[String] = Array(id, state, gender, owns_car, income, state_index, state_vec, gender_index, gender_vec, features)\nres27: org.apache.spark.sql.Row = [1,CA,male,false,40000.0,0.0,(2,[0],[1.0]),0.0,(1,[0],[1.0]),[40000.0,1.0,0.0,1.0]]\n"}]},"apps":[],"jobName":"paragraph_1514688411436_775444229","id":"20171230-184651_1340953693","dateCreated":"2017-12-30T18:46:51-0800","dateStarted":"2018-01-06T09:49:48-0800","dateFinished":"2018-01-06T09:49:49-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44505"},{"text":"%md\n\nNormalizing the continuous feature:\n\nMinMaxScaler transforms a dataset of Vector rows, rescaling each feature to a specific range (often [0, 1]). It takes parameters:\n\nmin: 0.0 by default. Lower bound after transformation, shared by all features.\nmax: 1.0 by default. Upper bound after transformation, shared by all features.","user":"anonymous","dateUpdated":"2018-01-05T10:05:43-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Normalizing the continuous feature:</p>\n<p>MinMaxScaler transforms a dataset of Vector rows, rescaling each feature to a specific range (often [0, 1]). It takes parameters:</p>\n<p>min: 0.0 by default. Lower bound after transformation, shared by all features.<br/>max: 1.0 by default. Upper bound after transformation, shared by all features.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1514939882242_-751078359","id":"20180102-163802_1235362205","dateCreated":"2018-01-02T16:38:02-0800","dateStarted":"2018-01-05T10:05:43-0800","dateFinished":"2018-01-05T10:05:43-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44506"},{"text":"import org.apache.spark.ml.feature.MinMaxScaler\nimport org.apache.spark.ml.linalg.Vectors\n\nval scaler = new MinMaxScaler()\n  .setInputCol(\"features\")\n  .setOutputCol(\"scaledFeatures\")\n\n// First fit to data to compute summary statistics\nval scalerModel = scaler.fit(assembled)\n\n// Then transform to rescale each feature to [0, 1] range\nval scaledData = scalerModel.transform(assembled)","user":"anonymous","dateUpdated":"2018-01-06T09:51:45-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.MinMaxScaler\nimport org.apache.spark.ml.linalg.Vectors\nscaler: org.apache.spark.ml.feature.MinMaxScaler = minMaxScal_30b99382f33f\nscalerModel: org.apache.spark.ml.feature.MinMaxScalerModel = minMaxScal_30b99382f33f\nscaledData: org.apache.spark.sql.DataFrame = [id: string, state: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514939898518_1490499381","id":"20180102-163818_1306692189","dateCreated":"2018-01-02T16:38:18-0800","dateStarted":"2018-01-06T09:51:45-0800","dateFinished":"2018-01-06T09:51:47-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44507"},{"text":"scaledData.columns\nscaledData.select(\"features\", \"scaledFeatures\").show()","user":"anonymous","dateUpdated":"2018-01-06T09:52:06-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res33: Array[String] = Array(id, state, gender, owns_car, income, state_index, state_vec, gender_index, gender_vec, features, scaledFeatures)\n+--------------------+------------------+\n|            features|    scaledFeatures|\n+--------------------+------------------+\n|[40000.0,1.0,0.0,...| [0.2,1.0,0.0,1.0]|\n|[50000.0,1.0,0.0,...| [0.3,1.0,0.0,0.0]|\n|   (4,[0],[35000.0])|[0.15,0.0,0.0,0.0]|\n|   (4,[0],[20000.0])| [0.0,0.0,0.0,0.0]|\n|[120000.0,1.0,0.0...| [1.0,1.0,0.0,1.0]|\n|[40000.0,0.0,1.0,...| [0.2,0.0,1.0,1.0]|\n|[41000.0,0.0,1.0,...|[0.21,0.0,1.0,1.0]|\n|[55000.0,1.0,0.0,...|[0.35,1.0,0.0,1.0]|\n|[40000.0,0.0,0.0,...| [0.2,0.0,0.0,1.0]|\n|[100000.0,1.0,0.0...| [0.8,1.0,0.0,0.0]|\n|[80000.0,1.0,0.0,...| [0.6,1.0,0.0,1.0]|\n|[75000.0,0.0,1.0,...|[0.55,0.0,1.0,0.0]|\n|[75000.0,0.0,1.0,...|[0.55,0.0,1.0,0.0]|\n+--------------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1514940210516_695853341","id":"20180102-164330_398421930","dateCreated":"2018-01-02T16:43:30-0800","dateStarted":"2018-01-06T09:52:06-0800","dateFinished":"2018-01-06T09:52:07-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44508"},{"text":"// Define the logistic regression model; need to set the outcome column","user":"anonymous","dateUpdated":"2018-01-05T10:05:43-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514775571337_1882252452","id":"20171231-185931_870110302","dateCreated":"2017-12-31T18:59:31-0800","dateStarted":"2018-01-05T10:05:51-0800","dateFinished":"2018-01-05T10:05:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44509"},{"text":"import org.apache.spark.ml.classification.{LogisticRegression, LogisticRegressionModel}\n\nval lr = new LogisticRegression()\n        .setLabelCol(\"owns_car_index\")\n        .setFeaturesCol(\"scaledFeatures\")\n        .setMaxIter(20) \n        .setRegParam(0.05)\n        .setElasticNetParam(0.0) // 0.0 is l2 regularization, 1.0 is l1 regularization","user":"anonymous","dateUpdated":"2018-01-06T09:54:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.classification.{LogisticRegression, LogisticRegressionModel}\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_e771cba2a79e\n"}]},"apps":[],"jobName":"paragraph_1514685468927_-476539082","id":"20171230-175748_154615716","dateCreated":"2017-12-30T17:57:48-0800","dateStarted":"2018-01-06T09:54:41-0800","dateFinished":"2018-01-06T09:54:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44510"},{"text":"// Now we put the pipeline together","user":"anonymous","dateUpdated":"2018-01-05T10:05:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514688055404_-343712056","id":"20171230-184055_1005228155","dateCreated":"2017-12-30T18:40:55-0800","dateStarted":"2018-01-05T10:05:52-0800","dateFinished":"2018-01-05T10:05:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44511"},{"text":"import org.apache.spark.ml.{Pipeline, PipelineModel}\n\nval pipeline = new Pipeline().setStages(Array(genderIndexer, genderOneHotEncoder, stateIndexer, stateOneHotEncoder) ++ Array(featuresAssembler, scaler, labelIndexer, lr))","user":"anonymous","dateUpdated":"2018-01-06T09:56:11-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.{Pipeline, PipelineModel}\npipeline: org.apache.spark.ml.Pipeline = pipeline_eb0945e9d612\n"}]},"apps":[],"jobName":"paragraph_1514688071675_719379804","id":"20171230-184111_1069347197","dateCreated":"2017-12-30T18:41:11-0800","dateStarted":"2018-01-06T09:56:11-0800","dateFinished":"2018-01-06T09:56:12-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44512"},{"text":"// We do train-test split first.","user":"anonymous","dateUpdated":"2018-01-05T10:05:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514685510031_1073290784","id":"20171230-175830_1631035603","dateCreated":"2017-12-30T17:58:30-0800","dateStarted":"2018-01-05T10:05:53-0800","dateFinished":"2018-01-05T10:05:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44513"},{"text":"val Array(trainDF, testDF) = dataDF.randomSplit(Array(0.65, 0.35))","user":"anonymous","dateUpdated":"2018-01-06T09:56:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: string, state: string ... 3 more fields]\ntestDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: string, state: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514685468101_-1551527509","id":"20171230-175748_2077697438","dateCreated":"2017-12-30T17:57:48-0800","dateStarted":"2018-01-06T09:56:41-0800","dateFinished":"2018-01-06T09:56:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44514"},{"text":"trainDF.count\ntrainDF.take(3)\n\ntestDF.count\ntestDF.take(3)","user":"anonymous","dateUpdated":"2018-01-06T09:56:55-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res37: Long = 8\nres38: Array[org.apache.spark.sql.Row] = Array([1,CA,male,false,40000.0], [10,CA,female,true,100000.0], [11,CA,male,true,80000.0])\nres40: Long = 5\nres41: Array[org.apache.spark.sql.Row] = Array([12,TX,female,true,75000.0], [2,CA,female,false,50000.0], [7,TX,male,false,41000.0])\n"}]},"apps":[],"jobName":"paragraph_1514684027260_1892102150","id":"20171230-173347_1990994065","dateCreated":"2017-12-30T17:33:47-0800","dateStarted":"2018-01-06T09:56:55-0800","dateFinished":"2018-01-06T09:56:57-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44515"},{"text":"val model = pipeline.fit(trainDF)","user":"anonymous","dateUpdated":"2018-01-06T09:57:04-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model: org.apache.spark.ml.PipelineModel = pipeline_eb0945e9d612\n"}]},"apps":[],"jobName":"paragraph_1514688191630_-184609901","id":"20171230-184311_1955575852","dateCreated":"2017-12-30T18:43:11-0800","dateStarted":"2018-01-06T09:57:04-0800","dateFinished":"2018-01-06T09:57:06-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44516"},{"text":"// We can now make predictions using 'model'","user":"anonymous","dateUpdated":"2018-01-05T10:05:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514688189305_-756731516","id":"20171230-184309_1609812260","dateCreated":"2017-12-30T18:43:09-0800","dateStarted":"2018-01-05T10:05:54-0800","dateFinished":"2018-01-05T10:05:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44517"},{"text":"val testPreds = model.transform(testDF)","user":"anonymous","dateUpdated":"2018-01-06T09:57:51-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testPreds: org.apache.spark.sql.DataFrame = [id: string, state: string ... 13 more fields]\n"}]},"apps":[],"jobName":"paragraph_1514689448050_189160761","id":"20171230-190408_216351950","dateCreated":"2017-12-30T19:04:08-0800","dateStarted":"2018-01-06T09:57:51-0800","dateFinished":"2018-01-06T09:57:51-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44518"},{"text":"testPreds.columns\ntestPreds.head","user":"anonymous","dateUpdated":"2018-01-06T09:58:01-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res42: Array[String] = Array(id, state, gender, owns_car, income, gender_index, gender_vec, state_index, state_vec, features, scaledFeatures, owns_car_index, rawPrediction, probability, prediction)\nres43: org.apache.spark.sql.Row = [12,TX,female,true,75000.0,1.0,(1,[],[]),1.0,(2,[1],[1.0]),[75000.0,0.0,1.0,0.0],[0.55,0.0,1.0,0.0],0.0,[0.13940109772809395,-0.13940109772809395],[0.534793947741875,0.4652060522581249],0.0]\n"}]},"apps":[],"jobName":"paragraph_1514689447722_-1075893623","id":"20171230-190407_388919338","dateCreated":"2017-12-30T19:04:07-0800","dateStarted":"2018-01-06T09:58:02-0800","dateFinished":"2018-01-06T09:58:02-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44519"},{"text":"labelIndexer.labels","user":"anonymous","dateUpdated":"2018-01-06T09:59:05-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res44: Array[String] = Array(true, false)\n"}]},"apps":[],"jobName":"paragraph_1514776057510_314871921","id":"20171231-190737_1988968839","dateCreated":"2017-12-31T19:07:37-0800","dateStarted":"2018-01-06T09:59:05-0800","dateFinished":"2018-01-06T09:59:06-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44520"},{"text":"// so true mapped to index 0.0\n// false mapped to index 1.0","user":"anonymous","dateUpdated":"2018-01-05T10:05:45-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1514689596778_95280385","id":"20171230-190636_1863897744","dateCreated":"2017-12-30T19:06:36-0800","dateStarted":"2018-01-05T10:05:57-0800","dateFinished":"2018-01-05T10:05:57-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44521"},{"text":"testPreds.select(\"owns_car\", \"probability\", \"prediction\").take(3)","user":"anonymous","dateUpdated":"2018-01-06T09:59:30-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res45: Array[org.apache.spark.sql.Row] = Array([true,[0.534793947741875,0.4652060522581249],0.0], [false,[0.4056718712527028,0.5943281287472972],1.0], [false,[0.5490421189736128,0.4509578810263873],0.0])\n"}]},"apps":[],"jobName":"paragraph_1514775990274_1858043920","id":"20171231-190630_948026638","dateCreated":"2017-12-31T19:06:30-0800","dateStarted":"2018-01-06T09:59:30-0800","dateFinished":"2018-01-06T09:59:31-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44522"},{"text":"testPreds.select(\"income\", \"state\", \"gender\", \"owns_car\", \"probability\", \"prediction\").columns\ntestPreds.select(\"income\", \"state\", \"gender\", \"owns_car\", \"probability\", \"prediction\").take(3)","user":"anonymous","dateUpdated":"2018-01-05T10:05:45-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res161: Array[String] = Array(income, state, gender, owns_car, probability, prediction)\nres162: Array[org.apache.spark.sql.Row] = Array([100000.0,CA,female,true,[0.6621844066137341,0.3378155933862659],0.0], [80000.0,CA,male,true,[0.8051686196546897,0.19483138034531022],0.0], [50000.0,CA,female,false,[0.2515718135150374,0.7484281864849627],1.0])\n"}]},"apps":[],"jobName":"paragraph_1514697785739_-1320583835","id":"20171230-212305_1862797406","dateCreated":"2017-12-30T21:23:05-0800","dateStarted":"2018-01-05T10:05:57-0800","dateFinished":"2018-01-05T10:05:58-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44523"},{"text":"import org.apache.spark.ml.evaluation.{BinaryClassificationEvaluator}\n\nval evaluator = new BinaryClassificationEvaluator()\n        .setLabelCol(\"owns_car_index\")\n        .setRawPredictionCol(\"probability\")\n        .setMetricName(\"areaUnderROC\") //\"areaUnderROC\" (default), or \"areaUnderPR\"","user":"anonymous","dateUpdated":"2018-01-06T10:01:30-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nevaluator: org.apache.spark.ml.evaluation.BinaryClassificationEvaluator = binEval_e24a3ce09be3\n"}]},"apps":[],"jobName":"paragraph_1514689596419_36413803","id":"20171230-190636_507344564","dateCreated":"2017-12-30T19:06:36-0800","dateStarted":"2018-01-06T10:01:30-0800","dateFinished":"2018-01-06T10:01:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44524"},{"text":"evaluator.evaluate(testPreds)","user":"anonymous","dateUpdated":"2018-01-06T10:01:32-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res48: Double = 0.8333333333333334\n"}]},"apps":[],"jobName":"paragraph_1514689445373_369977420","id":"20171230-190405_1815223795","dateCreated":"2017-12-30T19:04:05-0800","dateStarted":"2018-01-06T10:01:33-0800","dateFinished":"2018-01-06T10:01:33-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44525"},{"text":"val trainPreds = model.transform(trainDF)\ntrainPreds.head\nevaluator.evaluate(trainPreds)","user":"anonymous","dateUpdated":"2018-01-06T10:01:48-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainPreds: org.apache.spark.sql.DataFrame = [id: string, state: string ... 13 more fields]\nres49: org.apache.spark.sql.Row = [1,CA,male,false,40000.0,0.0,(1,[0],[1.0]),0.0,(2,[0],[1.0]),[40000.0,1.0,0.0,1.0],[0.2,1.0,0.0,1.0],1.0,[0.36039447998197804,-0.36039447998197804],[0.5891359231831392,0.4108640768168607],0.0]\nres50: Double = 0.8\n"}]},"apps":[],"jobName":"paragraph_1514685482344_-115998715","id":"20171230-175802_1167304119","dateCreated":"2017-12-30T17:58:02-0800","dateStarted":"2018-01-06T10:01:48-0800","dateFinished":"2018-01-06T10:01:49-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44526"},{"text":"import org.apache.spark.ml.linalg.DenseVector\n\nval scoreAndLabelsTrain = trainPreds.select(\"probability\", \"owns_car_index\")\n    .rdd\n    .map(row => \n            (row.getAs[DenseVector](\"probability\")(1), row.getAs[Double](\"owns_car_index\"))\n    )\n\nval scoreAndLabelsTest = testPreds.select(\"owns_car_index\", \"probability\")\n    .rdd\n    .map(row => \n            (row.getAs[DenseVector](\"probability\")(1), row.getAs[Double](\"owns_car_index\"))\n    )","user":"anonymous","dateUpdated":"2018-01-06T10:04:02-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.linalg.DenseVector\nscoreAndLabelsTrain: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[173] at map at <console>:69\nscoreAndLabelsTest: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[178] at map at <console>:70\n"}]},"apps":[],"jobName":"paragraph_1514701344514_-1635641755","id":"20171230-222224_323724036","dateCreated":"2017-12-30T22:22:24-0800","dateStarted":"2018-01-06T10:04:02-0800","dateFinished":"2018-01-06T10:04:04-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44527"},{"text":"// This approach gives more metrics other than auc roc and aur pr, e.g. precision, recall, ...\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n\nval metricsTrain = new BinaryClassificationMetrics(scoreAndLabelsTrain)\nval metricsTest = new BinaryClassificationMetrics(scoreAndLabelsTest)","user":"anonymous","dateUpdated":"2018-01-06T10:04:47-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nmetricsTrain: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@6966695d\nmetricsTest: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@68c31255\n"}]},"apps":[],"jobName":"paragraph_1514701344310_-1741832451","id":"20171230-222224_267210013","dateCreated":"2017-12-30T22:22:24-0800","dateStarted":"2018-01-06T10:04:47-0800","dateFinished":"2018-01-06T10:04:47-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44528"},{"text":"metricsTrain.areaUnderROC\nmetricsTest.areaUnderROC","user":"anonymous","dateUpdated":"2018-01-06T10:04:57-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res55: Double = 0.8\nres56: Double = 0.8333333333333334\n"}]},"apps":[],"jobName":"paragraph_1514701604523_307895674","id":"20171230-222644_1336238167","dateCreated":"2017-12-30T22:26:44-0800","dateStarted":"2018-01-06T10:04:57-0800","dateFinished":"2018-01-06T10:04:58-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44529"},{"text":"metricsTrain.roc.take(5)\nmetricsTest.roc.take(5)","user":"anonymous","dateUpdated":"2018-01-06T10:05:12-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res57: Array[(Double, Double)] = Array((0.0,0.0), (0.0,0.3333333333333333), (0.2,0.3333333333333333), (0.2,0.6666666666666666), (0.4,0.6666666666666666))\nres58: Array[(Double, Double)] = Array((0.0,0.0), (0.0,0.5), (0.3333333333333333,0.5), (0.3333333333333333,1.0), (0.6666666666666666,1.0))\n"}]},"apps":[],"jobName":"paragraph_1514701600141_1046213489","id":"20171230-222640_1877514455","dateCreated":"2017-12-30T22:26:40-0800","dateStarted":"2018-01-06T10:05:12-0800","dateFinished":"2018-01-06T10:05:13-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44530"},{"text":"val f1Scores = metricsTrain.fMeasureByThreshold\nf1Scores.collect.foreach { case (t, f) =>\n        println(s\"Threshold: $t, F-score: $f, Beta = 1\")\n    }","user":"anonymous","dateUpdated":"2018-01-06T10:05:35-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"f1Scores: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[211] at map at BinaryClassificationMetrics.scala:214\nThreshold: 0.6305483083337602, F-score: 0.5, Beta = 1\nThreshold: 0.5266045907654401, F-score: 0.4, Beta = 1\nThreshold: 0.4652060522581249, F-score: 0.6666666666666666, Beta = 1\nThreshold: 0.4580328480670825, F-score: 0.5714285714285715, Beta = 1\nThreshold: 0.4108640768168607, F-score: 0.7499999999999999, Beta = 1\nThreshold: 0.2601961893501752, F-score: 0.6666666666666666, Beta = 1\nThreshold: 0.18214778096010842, F-score: 0.6, Beta = 1\nThreshold: 0.06640116967744897, F-score: 0.5454545454545454, Beta = 1\n"}]},"apps":[],"jobName":"paragraph_1514701343874_-1487898177","id":"20171230-222223_1756017634","dateCreated":"2017-12-30T22:22:23-0800","dateStarted":"2018-01-06T10:05:35-0800","dateFinished":"2018-01-06T10:05:36-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44531"},{"text":"%md #### Putting everything together","user":"anonymous","dateUpdated":"2018-01-05T10:05:46-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Putting everything together</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1514703504873_2098457403","id":"20171230-225824_730697219","dateCreated":"2017-12-30T22:58:24-0800","dateStarted":"2018-01-05T10:05:46-0800","dateFinished":"2018-01-05T10:05:46-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44532"},{"text":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.Model\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.{MinMaxScaler, StringIndexer, VectorAssembler, OneHotEncoder};\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.{LogisticRegression, LogisticRegressionModel}\n\n\nval IndexerPostfix = \"_index\"\nval EncoderPostfix = \"_vec\"\nval FeaturesVectorColumn = \"features\"\nval ScaledFeaturesVectorColumn = \"features_scaled\"\nval ActionForInvalidFlag = \"skip\" // Can also be \"keep\" or \"error\"\nval TrainTestSplitRatio = 0.65\n\ndef trainLRModel(\n    allData: DataFrame,\n    labelCol: String, \n    continuousFeatures: Array[String], \n    categoricalFeatures: Array[String]): Model[_] = {\n    \n    val labelIndexer = new StringIndexer()\n        .setInputCol(labelCol)\n        .setOutputCol(labelCol + IndexerPostfix)\n        .fit(allData)\n        \n    // Encoding categorical features\n    val toOneHotEncoder = (featureName: String) => Seq(\n        new StringIndexer()\n            .setInputCol(featureName)\n            .setOutputCol(featureName + IndexerPostfix)\n            .setHandleInvalid(ActionForInvalidFlag)\n            .fit(allData),\n        new OneHotEncoder()\n            .setInputCol(featureName + IndexerPostfix)\n            .setOutputCol(featureName + EncoderPostfix))\n            \n    val categoricalStages = categoricalFeatures.flatMap(toOneHotEncoder)\n\n    val featuresNames = continuousFeatures ++ categoricalFeatures.map(_ + EncoderPostfix)\n    \n    val featuresAssembler = new VectorAssembler()\n        .setInputCols(featuresNames.toArray)\n        .setOutputCol(FeaturesVectorColumn)\n        \n    val scaler = new MinMaxScaler()\n        .setInputCol(FeaturesVectorColumn)\n        .setOutputCol(ScaledFeaturesVectorColumn)\n        \n    val lr = new LogisticRegression()\n        .setLabelCol(labelCol + IndexerPostfix)\n        .setFeaturesCol(ScaledFeaturesVectorColumn)\n        .setMaxIter(20)\n        .setRegParam(0.05) \n        .setElasticNetParam(0.0)\n    \n    val pipeline = new Pipeline().setStages(categoricalStages ++ Array(featuresAssembler, scaler, labelIndexer, lr))\n    \n    val Array(trainDF, testDF) = allData.randomSplit(Array(TrainTestSplitRatio, 1 - TrainTestSplitRatio))\n    \n    val trainedModel = pipeline.fit(trainDF)\n    \n    // do other things like evaluation..\n    \n    trainedModel\n}","user":"anonymous","dateUpdated":"2018-01-06T10:08:46-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.Model\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.{MinMaxScaler, StringIndexer, VectorAssembler, OneHotEncoder}\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.{LogisticRegression, LogisticRegressionModel}\nIndexerPostfix: String = _index\nEncoderPostfix: String = _vec\nFeaturesVectorColumn: String = features\nScaledFeaturesVectorColumn: String = features_scaled\nActionForInvalidFlag: String = skip\nTrainTestSplitRatio: Double = 0.65\ntrainLRModel: (allData: org.apache.spark.sql.DataFrame, labelCol: String, continuousFeatures: Array[String], categoricalFeatures: Array[String])org.apache.spark.ml.Model[_]\n"}]},"apps":[],"jobName":"paragraph_1514703502818_-971484720","id":"20171230-225822_1461200091","dateCreated":"2017-12-30T22:58:22-0800","dateStarted":"2018-01-06T10:08:46-0800","dateFinished":"2018-01-06T10:08:49-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44533"},{"text":"dataDF.columns","user":"anonymous","dateUpdated":"2018-01-06T10:08:52-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res63: Array[String] = Array(id, state, gender, owns_car, income)\n"}]},"apps":[],"jobName":"paragraph_1514767523139_-1713500136","id":"20171231-164523_1371814990","dateCreated":"2017-12-31T16:45:23-0800","dateStarted":"2018-01-06T10:08:52-0800","dateFinished":"2018-01-06T10:08:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44534"},{"text":"val trainedModel = trainLRModel(dataDF, \"owns_car\", Array(\"income\"), Array(\"state\", \"gender\"))","user":"anonymous","dateUpdated":"2018-01-06T10:09:29-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainedModel: org.apache.spark.ml.Model[_] = pipeline_5d4584178129\n"}]},"apps":[],"jobName":"paragraph_1514699073671_-1017951728","id":"20171230-214433_1226648522","dateCreated":"2017-12-30T21:44:33-0800","dateStarted":"2018-01-06T10:09:29-0800","dateFinished":"2018-01-06T10:09:31-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44535"},{"text":"val preds = trainedModel.transform(dataDF)\npreds.columns\npreds.head","user":"anonymous","dateUpdated":"2018-01-06T10:09:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"preds: org.apache.spark.sql.DataFrame = [id: string, state: string ... 13 more fields]\nres64: Array[String] = Array(id, state, gender, owns_car, income, state_index, state_vec, gender_index, gender_vec, features, features_scaled, owns_car_index, rawPrediction, probability, prediction)\nres65: org.apache.spark.sql.Row = [1,CA,male,false,40000.0,0.0,(2,[0],[1.0]),0.0,(1,[0],[1.0]),[40000.0,1.0,0.0,1.0],[0.0,1.0,0.0,1.0],1.0,[-1.2340818307145094,1.2340818307145094],[0.22546780847539172,0.7745321915246084],1.0]\n"}]},"apps":[],"jobName":"paragraph_1514767443215_759172131","id":"20171231-164403_36436813","dateCreated":"2017-12-31T16:44:03-0800","dateStarted":"2018-01-06T10:09:44-0800","dateFinished":"2018-01-06T10:09:45-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44536"},{"user":"anonymous","dateUpdated":"2018-01-05T10:05:47-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939553939_-1829568397","id":"20180102-163233_332843978","dateCreated":"2018-01-02T16:32:33-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44537"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939553889_-1922677631","id":"20180102-163233_44952552","dateCreated":"2018-01-02T16:32:33-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44538"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939553843_-1891128221","id":"20180102-163233_1953540501","dateCreated":"2018-01-02T16:32:33-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44539"},{"text":"import org.apache.spark.ml.feature.MinMaxScaler\nimport org.apache.spark.ml.linalg.Vectors\n\nval dataFrame = spark.createDataFrame(Seq(\n  (0, Vectors.dense(0.1, -1.0)),\n  (1, Vectors.dense(1.1, 1.0)),\n  (2, Vectors.dense(10.1, 3.0))\n)).toDF(\"id\", \"features\")\n\nval scaler = new MinMaxScaler()\n  .setInputCol(\"features\")\n  .setOutputCol(\"scaledFeatures\")\n\n// Compute summary statistics and generate MinMaxScalerModel\nval scalerModel = scaler.fit(dataFrame)\n\n// rescale each feature to range [min, max].\nval scaledData = scalerModel.transform(dataFrame)\nprintln(s\"Features scaled to range: [${scaler.getMin}, ${scaler.getMax}]\")\nscaledData.select(\"features\", \"scaledFeatures\").show()","user":"anonymous","dateUpdated":"2018-01-02T16:34:11-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.MinMaxScaler\nimport org.apache.spark.ml.linalg.Vectors\ndataFrame: org.apache.spark.sql.DataFrame = [id: int, features: vector]\nscaler: org.apache.spark.ml.feature.MinMaxScaler = minMaxScal_99778718cc85\nscalerModel: org.apache.spark.ml.feature.MinMaxScalerModel = minMaxScal_99778718cc85\nscaledData: org.apache.spark.sql.DataFrame = [id: int, features: vector ... 1 more field]\nFeatures scaled to range: [0.0, 1.0]\n+----------+--------------+\n|  features|scaledFeatures|\n+----------+--------------+\n|[0.1,-1.0]|     [0.0,0.0]|\n| [1.1,1.0]|     [0.1,0.5]|\n|[10.1,3.0]|     [1.0,1.0]|\n+----------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1514939553631_1106465784","id":"20180102-163233_1807930776","dateCreated":"2018-01-02T16:32:33-0800","dateStarted":"2018-01-02T16:34:11-0800","dateFinished":"2018-01-02T16:34:12-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44540"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939552653_1567394966","id":"20180102-163232_2046045003","dateCreated":"2018-01-02T16:32:32-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44541"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939551937_1645883742","id":"20180102-163231_539781789","dateCreated":"2018-01-02T16:32:31-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44542"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514939550979_536652663","id":"20180102-163230_802497633","dateCreated":"2018-01-02T16:32:30-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44543"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1514768120649_-1364846469","id":"20171231-165520_94273683","dateCreated":"2017-12-31T16:55:20-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:44544"}],"name":"DSbyHadi/Classification/LogisticRegression","id":"2D4Y4HAFH","angularObjects":{"2D23U6FRF:shared_process":[],"2CZ75NCX5:shared_process":[],"2CZR16154:shared_process":[],"2CZ8HPTXX:shared_process":[],"2D16FXM6F:shared_process":[],"2D3BXVJAG:shared_process":[],"2D3TV7XZY:shared_process":[],"2D2CQ39MH:shared_process":[],"2D1QFDUCP:shared_process":[],"2D2HQ94EB:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}