{"paragraphs":[{"text":"%md \n\n### Gradient Boosting Tree Classification with \n### Cross Validation Tuning in Scala using Spark ML \n\n*Hadi*","user":"anonymous","dateUpdated":"2018-02-22T18:23:24-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Gradient Boosting Tree Classification with</h3>\n<h3>Cross Validation Tuning in Scala using Spark ML</h3>\n<p><em>Hadi</em></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518141482136_1708767220","id":"20171225-164722_1822736710","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:24-0800","dateFinished":"2018-02-22T18:23:24-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:491"},{"text":"%md\n\n- Implement GBT classifier\n- Evaluate the GBT classifier\n- Tune and find best parameters using Cross Validation\n","user":"anonymous","dateUpdated":"2018-02-22T18:23:26-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>Implement GBT classifier</li>\n  <li>Evaluate the GBT classifier</li>\n  <li>Tune and find best parameters using Cross Validation</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1519318723383_159540399","id":"20180222-085843_604260564","dateCreated":"2018-02-22T08:58:43-0800","dateStarted":"2018-02-22T18:23:26-0800","dateFinished":"2018-02-22T18:23:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:492"},{"text":"%md\n\n<b>Boosting</b>:\n- based on weak learners (high bias, low variance) e.g. shallow decision trees --> GBT\n- learners(trees) are trained serially\n\n<b>Random Forest</b>:\n- based on large decision trees (low bias, high variance)\n- trees are trained in parallel","user":"anonymous","dateUpdated":"2018-02-22T18:23:29-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><b>Boosting</b>:<br/>- based on weak learners (high bias, low variance) e.g. shallow decision trees &ndash;&gt; GBT<br/>- learners(trees) are trained serially</p>\n<p><b>Random Forest</b>:<br/>- based on large decision trees (low bias, high variance)<br/>- trees are trained in parallel</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518820233820_1008046654","id":"20180216-143033_1942543415","dateCreated":"2018-02-16T14:30:33-0800","dateStarted":"2018-02-22T18:23:29-0800","dateFinished":"2018-02-22T18:23:29-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:493"},{"text":"%md\n\n### Implementing GBT classifier","user":"anonymous","dateUpdated":"2018-02-22T18:23:48-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Implementing GBT classifier</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1519319450234_-2095631080","id":"20180222-091050_200581719","dateCreated":"2018-02-22T09:10:50-0800","dateStarted":"2018-02-22T18:23:48-0800","dateFinished":"2018-02-22T18:23:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:494"},{"text":"import org.apache.spark.sql.DataFrame\n\nval data = spark\n            .read\n            .format(\"org.apache.spark.csv\")\n            .option(\"inferSchema\", \"true\")\n            .option(\"header\", \"true\")\n            .csv(\"/Users/hadi.minooei/Documents/DSbyHadi/car_ownership.csv\")","user":"anonymous","dateUpdated":"2018-02-22T18:22:59-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\ndata: org.apache.spark.sql.DataFrame = [id: int, income: double ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1518141482178_1681834797","id":"20171225-162607_709880967","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:22:59-0800","dateFinished":"2018-02-22T18:23:06-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:495"},{"text":"data.count\ndata.columns\ndata.printSchema","user":"anonymous","dateUpdated":"2018-02-22T18:22:59-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1486: Long = 13\nres1487: Array[String] = Array(id, income, state, gender, owns_car)\nroot\n |-- id: integer (nullable = true)\n |-- income: double (nullable = true)\n |-- state: string (nullable = true)\n |-- gender: string (nullable = true)\n |-- owns_car: boolean (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1518141482180_1679526304","id":"20171230-112014_1719391521","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:22:59-0800","dateFinished":"2018-02-22T18:23:08-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:496"},{"text":"// We need to predict owns_car --> response\n// Features:\n// 'income' is a continuous feature \n// 'state' and 'gender' are categorical features","user":"anonymous","dateUpdated":"2018-02-22T18:22:59-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482187_1678372057","id":"20171225-164405_808048175","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:07-0800","dateFinished":"2018-02-22T18:23:10-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:498"},{"text":"// We need to index the owns_car i.e. true -> 0.0 and false -> 1.0 or vice versa.\n// For this we use StringIndexer.","user":"anonymous","dateUpdated":"2018-02-22T18:22:59-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482188_1676448313","id":"20171225-164950_1144267600","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:08-0800","dateFinished":"2018-02-22T18:23:10-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:499"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1519351435746_-359400490","id":"20180222-180355_367313797","dateCreated":"2018-02-22T18:03:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3188","text":"import org.apache.spark.sql.types.StringType\n\nval dataDF = data\n                .withColumn(\"owns_car_string\", data(\"owns_car\").cast(StringType))\n                .drop(\"owns_car\")\n                .withColumnRenamed(\"owns_car_string\", \"owns_car\")","dateUpdated":"2018-02-22T18:23:10-0800","dateFinished":"2018-02-22T18:23:11-0800","dateStarted":"2018-02-22T18:23:10-0800","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types.StringType\ndataDF: org.apache.spark.sql.DataFrame = [id: int, income: double ... 3 more fields]\n"}]}},{"text":"import org.apache.spark.ml.feature.{StringIndexer}\n\nval labelIndexer = new StringIndexer()\n        .setInputCol(\"owns_car\")\n        .setOutputCol(\"owns_car_index\")\n        .fit(dataDF)","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.StringIndexer\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_4eb33d85ab29\n"}]},"apps":[],"jobName":"paragraph_1518141482189_1676063564","id":"20171230-111645_1636461841","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:11-0800","dateFinished":"2018-02-22T18:23:13-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:500"},{"text":"labelIndexer.transform(dataDF).columns\nlabelIndexer.transform(dataDF).take(4)","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1499: Array[String] = Array(id, income, state, gender, owns_car, owns_car_index)\nres1500: Array[org.apache.spark.sql.Row] = Array([1,40000.0,CA,male,false,1.0], [2,50000.0,CA,female,false,1.0], [3,35000.0,UT,female,true,0.0], [4,20000.0,UT,female,false,1.0])\n"}]},"apps":[],"jobName":"paragraph_1518141482190_1677217810","id":"20171230-182705_1615244198","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:12-0800","dateFinished":"2018-02-22T18:23:14-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:501"},{"text":"//categorical features ('state' and 'gender') need to be indexed.","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482192_1687221282","id":"20171231-184422_1966221586","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:13-0800","dateFinished":"2018-02-22T18:23:15-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:502"},{"text":"%md\n##### Do not need to do OneHotEncoding","user":"anonymous","dateUpdated":"2018-02-22T18:23:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h5>Do not need to do OneHotEncoding</h5>\n</div>"}]},"apps":[],"jobName":"paragraph_1518147038989_-1710177213","id":"20180208-193038_2116727936","dateCreated":"2018-02-08T19:30:38-0800","dateStarted":"2018-02-22T18:23:44-0800","dateFinished":"2018-02-22T18:23:44-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:503"},{"text":"val genderIndexer = new StringIndexer()\n        .setInputCol(\"gender\")\n        .setOutputCol(\"gender\" + \"_index\")\n        .setHandleInvalid(\"skip\")\n        .fit(dataDF)\n\nval stateIndexer = new StringIndexer()\n        .setInputCol(\"state\")\n        .setOutputCol(\"state\" + \"_index\")\n        .setHandleInvalid(\"skip\")\n        .fit(dataDF)","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"genderIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_1d1e729c2ca1\nstateIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_d81e5a865869\n"}]},"apps":[],"jobName":"paragraph_1518141482203_1684528039","id":"20171230-111727_1248125003","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:14-0800","dateFinished":"2018-02-22T18:23:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:504"},{"text":"val test1 = stateIndexer.transform(dataDF)\nval test2 = genderIndexer.transform(test1)\n\ntest2.columns\ntest2.take(6)","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"test1: org.apache.spark.sql.DataFrame = [id: int, income: double ... 4 more fields]\ntest2: org.apache.spark.sql.DataFrame = [id: int, income: double ... 5 more fields]\nres1505: Array[String] = Array(id, income, state, gender, owns_car, state_index, gender_index)\nres1506: Array[org.apache.spark.sql.Row] = Array([1,40000.0,CA,male,false,0.0,0.0], [2,50000.0,CA,female,false,0.0,1.0], [3,35000.0,UT,female,true,2.0,1.0], [4,20000.0,UT,female,false,2.0,1.0], [5,120000.0,CA,male,true,0.0,0.0], [6,40000.0,TX,male,true,1.0,0.0])\n"}]},"apps":[],"jobName":"paragraph_1518141482207_1682989044","id":"20171230-111726_1473112042","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:15-0800","dateFinished":"2018-02-22T18:23:19-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:505"},{"text":"// Putting all featurs together in a vector\n\n// features: state_index, gender_index, income","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482213_1666829590","id":"20171230-183518_1054552292","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:17-0800","dateFinished":"2018-02-22T18:23:20-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:506"},{"text":"%md \n<b>VectorAssembler</b> is a transformer that combines a given list of columns into a single vector column. It is useful for combining raw features and features generated by different feature transformers into a single feature vector","user":"anonymous","dateUpdated":"2018-02-22T18:23:55-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><b>VectorAssembler</b> is a transformer that combines a given list of columns into a single vector column. It is useful for combining raw features and features generated by different feature transformers into a single feature vector</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518141482215_1667599088","id":"20171231-185632_839988333","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:55-0800","dateFinished":"2018-02-22T18:23:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:507"},{"text":"import org.apache.spark.ml.feature.VectorAssembler\n\nval featuresAssembler = new VectorAssembler()\n                            .setInputCols(Array(\"income\", \"state_index\", \"gender_index\"))\n                            .setOutputCol(\"features\")\n                            \nval assembled = featuresAssembler.transform(test2)\nassembled.columns\nassembled.head","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.VectorAssembler\nfeaturesAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_31c69e2e0180\nassembled: org.apache.spark.sql.DataFrame = [id: int, income: double ... 6 more fields]\nres1513: Array[String] = Array(id, income, state, gender, owns_car, state_index, gender_index, features)\nres1514: org.apache.spark.sql.Row = [1,40000.0,CA,male,false,0.0,0.0,[40000.0,0.0,0.0]]\n"}]},"apps":[],"jobName":"paragraph_1518141482217_1665290594","id":"20171230-183509_51608077","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:20-0800","dateFinished":"2018-02-22T18:23:24-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:508"},{"text":"%md\n\n##### No need to normalize continuous features.","user":"anonymous","dateUpdated":"2018-02-22T18:23:58-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h5>No need to normalize continuous features.</h5>\n</div>"}]},"apps":[],"jobName":"paragraph_1518141482221_1663751599","id":"20180102-163802_1235362205","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:58-0800","dateFinished":"2018-02-22T18:23:58-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:509"},{"text":"// Define the Gradient Boosting Tree model","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482227_1675294066","id":"20171231-185931_870110302","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:21-0800","dateFinished":"2018-02-22T18:23:25-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:510"},{"text":"import org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\n\nval gbt = new GBTClassifier()\n        .setLabelCol(\"owns_car_index\")\n        .setFeaturesCol(\"features\")\n        .setMaxIter(4) // number of trees, default is 20\n        .setMaxDepth(3) // default is 5 (the same as Random Forest)","user":"anonymous","dateUpdated":"2018-02-22T18:23:00-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\ngbt: org.apache.spark.ml.classification.GBTClassifier = gbtc_f32f6e802be6\n"}]},"apps":[],"jobName":"paragraph_1518141482228_1673370321","id":"20171230-175748_154615716","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:25-0800","dateFinished":"2018-02-22T18:23:27-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:511"},{"text":"%md\n#### Note: Multiclass labels are not _currently_ supported. (Spark doc)","user":"anonymous","dateUpdated":"2018-02-22T18:23:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Note: Multiclass labels are not <em>currently</em> supported. (Spark doc)</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1518225504758_87078047","id":"20180209-171824_42628775","dateCreated":"2018-02-09T17:18:24-0800","dateStarted":"2018-02-22T18:23:40-0800","dateFinished":"2018-02-22T18:23:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:512"},{"text":"%md\n\n<b>Parameters from TreeClassifierParams:</b>\nsetMaxDepth\nsetMaxBins\nsetMinInstancesPerNode\nsetMinInfoGain\nsetMaxMemoryInMB\nsetCacheNodeIds\nsetCheckpointInterval\n\n<b>Parameters from TreeEnsembleParams:</b>\nsetSubsamplingRate\nsetSeed\n\n<b>Parameters from GBTParams:</b>\nsetMaxIter\nsetStepSize //i.e. Learning rate\n\n<b>Parameters from GBTClassifierParams:</b>\nsetLossType //Supported: \"logistic\"\n\n<b>You can check the definitions and default values in here:</b>\nhttps://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/tree/treeParams.scala","user":"anonymous","dateUpdated":"2018-02-22T18:24:01-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<b>Parameters from TreeClassifierParams:</b>\n<p>setMaxDepth<br/>setMaxBins<br/>setMinInstancesPerNode<br/>setMinInfoGain<br/>setMaxMemoryInMB<br/>setCacheNodeIds<br/>setCheckpointInterval</p>\n<b>Parameters from TreeEnsembleParams:</b>\n<p>setSubsamplingRate<br/>setSeed</p>\n<b>Parameters from GBTParams:</b>\n<p>setMaxIter<br/>setStepSize //i.e. Learning rate</p>\n<b>Parameters from GBTClassifierParams:</b>\n<p>setLossType //Supported: &ldquo;logistic&rdquo;</p>\n<b>You can check the definitions and default values in here:</b>\n<p><a href=\"https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/tree/treeParams.scala\">https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/tree/treeParams.scala</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518146145907_773909995","id":"20180208-191545_914398314","dateCreated":"2018-02-08T19:15:45-0800","dateStarted":"2018-02-22T18:24:01-0800","dateFinished":"2018-02-22T18:24:01-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:513"},{"text":"// Now we put the pipeline together","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482228_1673370321","id":"20171230-184055_1005228155","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:26-0800","dateFinished":"2018-02-22T18:23:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:514"},{"text":"import org.apache.spark.ml.{Pipeline, PipelineModel}\n\nval pipeline = new Pipeline().setStages(Array(genderIndexer, stateIndexer) ++ Array(featuresAssembler, labelIndexer, gbt))","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.{Pipeline, PipelineModel}\npipeline: org.apache.spark.ml.Pipeline = pipeline_7e8eb49c0ae1\n"}]},"apps":[],"jobName":"paragraph_1518141482229_1672985572","id":"20171230-184111_1069347197","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:28-0800","dateFinished":"2018-02-22T18:23:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:515"},{"text":"// We do train-test split first.","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482242_1755706586","id":"20171230-175830_1631035603","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:28-0800","dateFinished":"2018-02-22T18:23:31-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:516"},{"text":"val Array(trainDF, testDF) = dataDF.randomSplit(Array(0.65, 0.35))\ntrainDF.count\ntestDF.count","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: int, income: double ... 3 more fields]\ntestDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: int, income: double ... 3 more fields]\nres1523: Long = 8\nres1524: Long = 5\n"}]},"apps":[],"jobName":"paragraph_1518141482243_1755321837","id":"20171230-175748_2077697438","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:31-0800","dateFinished":"2018-02-22T18:23:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:517"},{"text":"val model = pipeline.fit(trainDF)","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model: org.apache.spark.ml.PipelineModel = pipeline_7e8eb49c0ae1\n"}]},"apps":[],"jobName":"paragraph_1518141482245_1753013344","id":"20171230-184311_1955575852","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:31-0800","dateFinished":"2018-02-22T18:23:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:518"},{"text":"// We can now make predictions using 'model'","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518141482245_1753013344","id":"20171230-184309_1609812260","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:35-0800","dateFinished":"2018-02-22T18:23:39-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:519"},{"text":"val testPreds = model.transform(testDF)\ntestPreds.columns\ntestPreds.select(\"owns_car_index\", \"prediction\").take(3)","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testPreds: org.apache.spark.sql.DataFrame = [id: int, income: double ... 8 more fields]\nres1527: Array[String] = Array(id, income, state, gender, owns_car, gender_index, state_index, features, owns_car_index, prediction)\nres1528: Array[org.apache.spark.sql.Row] = Array([1.0,0.0], [1.0,0.0], [0.0,0.0])\n"}]},"apps":[],"jobName":"paragraph_1518141482246_1754167590","id":"20171230-190408_216351950","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:39-0800","dateFinished":"2018-02-22T18:23:43-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:520"},{"text":"labelIndexer.labels\n// so true mapped to index 0.0\n// false mapped to index 1.0","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1529: Array[String] = Array(true, false)\n"}]},"apps":[],"jobName":"paragraph_1518141482248_1751859097","id":"20171231-190737_1988968839","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:40-0800","dateFinished":"2018-02-22T18:23:44-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:521"},{"text":"%md\n\n#### Evaluate the GBT Classifier","user":"anonymous","dateUpdated":"2018-02-22T18:23:35-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Evaluate the GBT Classifier</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1519318070695_-1958866264","id":"20180222-084750_1962500711","dateCreated":"2018-02-22T08:47:50-0800","dateStarted":"2018-02-22T18:23:35-0800","dateFinished":"2018-02-22T18:23:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:522"},{"text":"// Can compute AUCROC similar to logistic regression since we have two classes here. (see Tutorial 1)\n// Also other metrics such as \"f1\", \"weightedPrecision\", \"weightedRecall\", \"accuracy\" are available (see Tutorial 2.1)","user":"anonymous","dateUpdated":"2018-02-22T18:23:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1518145688624_1228206500","id":"20180208-190808_498663739","dateCreated":"2018-02-08T19:08:08-0800","dateStarted":"2018-02-22T18:23:44-0800","dateFinished":"2018-02-22T18:23:45-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:523"},{"text":"import org.apache.spark.ml.evaluation.{MulticlassClassificationEvaluator}\n\nval evaluator = new MulticlassClassificationEvaluator()\n        .setLabelCol(\"owns_car_index\")\n        .setPredictionCol(\"prediction\")\n        .setMetricName(\"f1\")\n        \nevaluator.evaluate(testPreds)","user":"anonymous","dateUpdated":"2018-02-22T18:23:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_57a71944dacc\nres1538: Double = 0.2285714285714286\n"}]},"apps":[],"jobName":"paragraph_1518226228630_851042699","id":"20180209-173028_420190600","dateCreated":"2018-02-09T17:30:28-0800","dateStarted":"2018-02-22T18:23:44-0800","dateFinished":"2018-02-22T18:23:47-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:524"},{"text":"%md\n\n#### Tune and find best parameters using Cross Validation","user":"anonymous","dateUpdated":"2018-02-22T18:24:09-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Tune and find best parameters using Cross Validation</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1519319512044_-968624930","id":"20180222-091152_860160417","dateCreated":"2018-02-22T09:11:52-0800","dateStarted":"2018-02-22T18:24:09-0800","dateFinished":"2018-02-22T18:24:09-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:525"},{"text":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.Model\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.{StringIndexer, VectorAssembler};\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\nimport org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\n\n\nval IndexerPostfix = \"_index\"\nval FeaturesVectorColumn = \"features\"\nval ActionForInvalidFlag = \"skip\" // Can also be \"keep\" or \"error\"\nval TrainTestSplitRatio = 0.65\n\ndef trainGBTModel(\n    allData: DataFrame,\n    labelCol: String, \n    continuousFeatures: Array[String], \n    categoricalFeatures: Array[String]): Model[_] = {\n    \n    val labelIndexer = new StringIndexer()\n        .setInputCol(labelCol)\n        .setOutputCol(labelCol + IndexerPostfix)\n        .fit(allData)\n        \n    // Indexing categorical features\n    val indexer = (featureName: String) => Seq(\n        new StringIndexer()\n            .setInputCol(featureName)\n            .setOutputCol(featureName + IndexerPostfix)\n            .setHandleInvalid(ActionForInvalidFlag)\n            .fit(allData))\n            \n    val categoricalStages = categoricalFeatures.flatMap(indexer)\n\n    val featuresNames = continuousFeatures ++ categoricalFeatures.map(_ + IndexerPostfix)\n    \n    val featuresAssembler = new VectorAssembler()\n        .setInputCols(featuresNames.toArray)\n        .setOutputCol(FeaturesVectorColumn)\n        \n    val gbt = new GBTClassifier()\n        .setLabelCol(\"owns_car_index\")\n        .setFeaturesCol(\"features\")\n        //.setMaxIter(4) // will add them in CV\n        //.setMaxDepth(3) // will add them in CV\n    \n    val evaluator = new MulticlassClassificationEvaluator()\n        .setLabelCol(\"owns_car_index\")\n        .setPredictionCol(\"prediction\")\n        .setMetricName(\"f1\")\n    \n    val paramGrid = new ParamGridBuilder()\n        .addGrid(gbt.maxIter, Array(3, 4, 10))\n        .addGrid(gbt.maxDepth, Array(2, 3))\n        .build()\n    \n    val pipeline = new Pipeline().setStages(categoricalStages ++ Array(featuresAssembler, labelIndexer, gbt))\n    \n    //val Array(trainDF, testDF) = allData.randomSplit(Array(TrainTestSplitRatio, 1 - TrainTestSplitRatio))\n    \n    val cv = new CrossValidator()\n                    .setEstimator(pipeline)\n                    .setEvaluator(evaluator)\n                    .setEstimatorParamMaps(paramGrid)\n                    .setNumFolds(3) // At least 2\n    \n    val fittedCV = cv.fit(allData)\n    //...\n    fittedCV.write.overwrite().save(\"/Users/hadi.minooei/Documents/DSbyHadi/gbt_cv/\") // User  CrossValidatorModel.load(\"modelOutput\") to reload and use the model.\n    //...\n    fittedCV\n}","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.Model\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.{StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\nimport org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\nIndexerPostfix: String = _index\nFeaturesVectorColumn: String = features\nActionForInvalidFlag: String = skip\nTrainTestSplitRatio: Double = 0.65\ntrainGBTModel: (allData: org.apache.spark.sql.DataFrame, labelCol: String, continuousFeatures: Array[String], categoricalFeatures: Array[String])org.apache.spark.ml.Model[_]\n"}]},"apps":[],"jobName":"paragraph_1518141482260_1759554075","id":"20171230-225822_1461200091","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:45-0800","dateFinished":"2018-02-22T18:23:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:526"},{"text":"val trainedGBTModel = trainGBTModel(dataDF, \"owns_car\", Array(\"income\"), Array(\"state\", \"gender\"))\nval preds = trainedGBTModel.transform(dataDF)\npreds.columns\npreds.head","user":"anonymous","dateUpdated":"2018-02-22T18:23:01-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainedGBTModel: org.apache.spark.ml.Model[_] = cv_aa315950349c\npreds: org.apache.spark.sql.DataFrame = [id: int, income: double ... 8 more fields]\nres1542: Array[String] = Array(id, income, state, gender, owns_car, state_index, gender_index, features, owns_car_index, prediction)\nres1543: org.apache.spark.sql.Row = [1,40000.0,CA,male,false,0.0,0.0,[40000.0,0.0,0.0],1.0,1.0]\n"}]},"apps":[],"jobName":"paragraph_1518141482261_1759169326","id":"20171230-214433_1226648522","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:49-0800","dateFinished":"2018-02-22T18:25:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:527"},{"text":"%md\n###### Let's check the best params chosen","user":"anonymous","dateUpdated":"2018-02-22T18:24:15-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h6>Let&rsquo;s check the best params chosen</h6>\n</div>"}]},"apps":[],"jobName":"paragraph_1518227905931_-1465735697","id":"20180209-175825_615411070","dateCreated":"2018-02-09T17:58:25-0800","dateStarted":"2018-02-22T18:24:15-0800","dateFinished":"2018-02-22T18:24:15-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:528"},{"text":"val cvModel = CrossValidatorModel.load(\"/Users/hadi.minooei/Documents/DSbyHadi/gbt_cv/\")","user":"anonymous","dateUpdated":"2018-02-22T18:23:02-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cvModel: org.apache.spark.ml.tuning.CrossValidatorModel = cv_aa315950349c\n"}]},"apps":[],"jobName":"paragraph_1518141482263_1759938824","id":"20180102-163233_332843978","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:23:57-0800","dateFinished":"2018-02-22T18:25:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:529"},{"text":"import org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\n\nval bpm = cvModel.asInstanceOf[CrossValidatorModel].bestModel.asInstanceOf[PipelineModel]\nval gbtModel = bpm.stages(bpm.stages.length - 1).asInstanceOf[GBTClassificationModel]\ngbtModel.getMaxIter\ngbtModel.getMaxDepth","user":"anonymous","dateUpdated":"2018-02-22T18:23:02-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\nbpm: org.apache.spark.ml.PipelineModel = pipeline_b2b823d65e12\ngbtModel: org.apache.spark.ml.classification.GBTClassificationModel = GBTClassificationModel (uid=gbtc_fbc70702645e) with 3 trees\nres1545: Int = 3\nres1546: Int = 2\n"}]},"apps":[],"jobName":"paragraph_1518141482266_1758784577","id":"20180102-163233_44952552","dateCreated":"2018-02-08T17:58:02-0800","dateStarted":"2018-02-22T18:25:26-0800","dateFinished":"2018-02-22T18:25:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:530"},{"user":"anonymous","dateUpdated":"2018-02-22T10:11:39-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1519180688153_-285063848","id":"20180220-183808_1869761440","dateCreated":"2018-02-20T18:38:08-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:531"}],"name":"DSbyHadi/Classification/GBTandCV","id":"2D7M1QRU4","angularObjects":{"2D23U6FRF:shared_process":[],"2CZ75NCX5:shared_process":[],"2CZR16154:shared_process":[],"2CZ8HPTXX:shared_process":[],"2D16FXM6F:shared_process":[],"2D3BXVJAG:shared_process":[],"2D3TV7XZY:shared_process":[],"2D2CQ39MH:shared_process":[],"2D1QFDUCP:shared_process":[],"2D2HQ94EB:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}